# -*- coding: utf-8 -*-
"""
Entrada de dados do cubo com dois elementos triangulares por lado
"""
import numpy as np

def dad_cubo2():
   
   NOS = np.array([[0, 0, 0],
                   [1, 0, 0],
                   [0, 1, 0],
                   [1, 1, 0],
                   [0, 0, 1],
                   [1, 0, 1],
                   [0, 1, 1],
                   [1, 1, 1]])
   
   ELEM = np.array([[1,  4,  2],
                    [1,   3, 4],
                    [1,   6,  5],
                    [1,   2,  6],
                    [2,   8,   6],
                    [2,   4, 8],
                    [3,   8, 4],
                    [3,  7,  8],
                    [1,  7,   3],
                    [1,  5,  7],
                    [5,   8,  7],
                    [5,  6,  8]]) - 1
   
   SUP = np.array([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])
   
   CCSup = {0: [0,0], 5: [0,1]}

   k = 1   
   
   # elem_bc = np.array([[0,0],[0,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[0,1],[0,1]])

   return NOS, ELEM, SUP, CCSup, k


def dad_cubo4():
   NOS = np.array([[0, 0, 0],
                   [1, 0, 0],
                   [0, 1, 0],
                   [1, 1, 0],
                   [.5, .5, 0],
                   [.5, 0, .5],
                   [1, .5, .5],
                   [.5, 1, .5],
                   [0, .5, .5],
                   [0, 0, 1],
                   [1, 0, 1],
                   [1, 1, 1],
                   [0, 1, 1],
                   [.5, .5, 1]])
   
   ELEM = np.array([[1, 5, 2],
                    [3, 5, 1],
                    [4, 5, 3],
                    [2, 5, 4],
                    
                    [ 2, 6,  1],
                    [11, 6,  2],
                    [10, 6, 11],
                    [ 1, 6, 10],
                    
                    [ 4, 7,  2],
                    [12, 7,  4],
                    [11, 7, 12],
                    [ 2, 7, 11],
                    
                    [ 3, 8,  4],
                    [13, 8,  3],
                    [12, 8, 13],
                    [ 4, 8, 12],
                    
                    [ 1, 9,  3],
                    [10, 9,  1],
                    [13, 9, 10],
                    [ 3, 9, 13],
                    
                    [11, 14, 10],
                    [12, 14, 11],
                    [13, 14, 12],
                    [10, 14, 13]]) - 1

   SUP = np.array([0,0,0,0, 1,1,1,1, 2,2,2,2, 3,3,3,3, 4,4,4,4, 5,5,5,5])
   
   CCSup = {0: [0,0], 5: [0,1]}

   k = 1   
   
   return NOS, ELEM, SUP, CCSup, k


def dad_cubo8():
   
   LL = 1 # Comprimento do lado
   
   NOS = np.array([[0,    0,    0],
                   [LL/2, 0,    0],
                   [LL,   0,    0],
                   [0,    LL/2, 0],
                   [LL/2, LL/2,	0],
                   [LL,	  LL/2,	0],
                   [0,	  LL,   0],
                   [LL/2, LL,   0],
                   [LL,   LL,   0],
                   [0,	  0,	LL/2],
                   [LL/2, 0,	LL/2],
                   [LL,   0,	LL/2],
                   [LL,   LL/2,	LL/2],
                   [LL,   LL,   LL/2],
                   [LL/2, LL,   LL/2],
                   [0,	  LL,   LL/2],
                   [0,	  LL/2,	LL/2],
                   [0,	  0,	LL],
                   [LL/2, 0,	LL],
                   [LL,   0,	LL],
                   [0,	  LL/2,	LL],
                   [LL/2, LL/2,	LL],
                   [LL,   LL/2,	LL],
                   [0,	  LL,   LL],
                   [LL/2, LL,   LL],
                   [LL,   LL,   LL]])
   
   ELEM = np.array([[ 1,     4,     2],
                    [ 4,     5,     2],
                    [ 4,     7,     5],
                    [ 7,     8,     5],
                    [ 2,     5,     3],
                    [ 5,     6,     3],
                    [ 5,     8,     6],
                    [ 8,     9,     6],
                    [ 1,    11,    10],
                    [ 1,     2,    11],
                    [ 2,    12,    11],
                    [ 2,     3,    12],
                    [10,    19,    18],
                    [10,    11,    19],
                    [11,    20,    19],
                    [11,    12,    20],
                    [ 3,    13,    12],
                    [ 3,     6,    13],
                    [ 6,    14,    13],
                    [ 6,     9,    14],
                    [12,    23,    20],
                    [12,    13,    23],
                    [13,    26,    23],
                    [13,    14,    26],
                    [ 9,    15,    14],
                    [ 9,     8,    15],
                    [ 8,    16,    15],
                    [ 8,     7,    16],
                    [14,    25,    26],
                    [14,    15,    25],
                    [15,    24,    25],
                    [15,    16,    24],
                    [ 7,    17,    16],
                    [ 7,     4,    17],
                    [ 4,    10,    17],
                    [ 4,     1,    10],
                    [16,    21,    24],
                    [16,    17,    21],
                    [17,    18,    21],
                    [17,    10,    18],
                    [23,    26,    25],
                    [23,    25,    22],
                    [20,    23,    22],
                    [20,    22,    19],
                    [22,    25,    24],
                    [22,    24,    21],
                    [19,    22,    21],
                    [19,    21,    18]]) - 1
   
   SUP = np.array([0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5])
     
   CCSup = {0: [0,0], 5: [0,1]}

   k = 1
   
   return NOS, ELEM, SUP, CCSup, k   